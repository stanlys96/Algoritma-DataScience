# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
# untuk persiapan data
library(dplyr)
library(rsample)
# untuk text processing
library(tm)
library(SnowballC)
library(inspectdf)
# untuk keperluan machine learning
library(e1071)
library(caret)
library(ROCR)
knitr::include_graphics("assets/C2.png")
customer <- read.csv("data_input/customer_behaviour.csv",
stringsAsFactors = T)
head(customer)
# cek struktur data
glimpse(customer)
# cek summary data
summary(customer)
# tabel frekuensi kolom Purchased
table(customer$Purchased)
# peluang membeli produk
143 / (143 + 257)
# 1. Tentukan P(Purchased = Yes)
table(customer$Purchased)
p_yes <- 143 / (143 + 257)
p_yes
# 2. Tentukan P(Gender = Male)
table(customer$Gender)
p_male <- 196 / (196+204)
p_male
# 3. Tentukan P(gender = Male | Purchased = Yes)
table(customer$Purchased, customer$Gender)
# peluang membeli produk jika customer adalah pria
p_male_yes <- 66 / (66 + 77)
p_male_yes
# 4. Hitung P(Purchased = Yes | Gender = Male)
p_yes_male <- (p_male_yes * p_yes) / p_male
p_yes_male
# Membuat model dengan 1 prediktor
nb_gender <- naiveBayes(formula = Purchased ~ Gender,
data = customer)
# output model 1 prediktor
nb_gender
predict(object = nb_gender,
newdata = data.frame(Gender = "Male"),
type = "class")
predict(object = nb_gender,
newdata = data.frame(Gender = "Male"),
type = "raw")
# membuat model dengan semua prediktor
nb_all <- naiveBayes(formula = Purchased ~ .,
data = customer)
nb_all
new_cust <- data.frame(Gender = "Female",
Age = "< 30",
Salary = "Medium")
new_cust
# prediksi peluang dengan semua prediktor
predict(nb_all, new_cust, type = "raw")
new_table <- matrix(c(130, 143, 127, 0), nrow = 2, dimnames = list(c("Female", "Male"), c("No", "Yes")))
new_table
new_table %>% prop.table(margin = 2)
# Menambahkan nilai 1 untuk setiap nilai
new_table_lp <- matrix(c(130, 143, 127, 0) + 1,
nrow = 2,
dimnames = list(c("Female", "Male"), c("No", "Yes")))
new_table_lp
new_table_lp %>% prop.table(margin = 2)
# train
nb_all_lp <- naiveBayes(formula = Purchased ~ . ,
data = customer,
laplace = 0.1)
# predict
predict(nb_all_lp, newdata = new_cust, type = "raw")
votes <- read.csv("data_input/votes.txt", stringsAsFactors = T, header = FALSE)
colnames(votes) <- c("party", "hcapped_infants", "watercost_sharing", "adoption_budget_reso",
"physfee_freeze", "elsalvador_aid", "religious_grps", "antisatellite_ban",
"nicaraguan_contras", "mxmissile", "immigration", "synfuels_cutback",
"education_funding", "superfundright_sue", "crime", "dutyfree_exps",
"expadmin_southafr")
head(votes)
glimpse(votes)
summary(votes)
# Hint: menggunakan prop.table()
table(votes$party) %>% prop.table()
RNGkind(sample.kind = "Rounding")
set.seed(100)
# membuat binary split data menjadi set data training dan testing dengan proporsi 80:20
splitter <- initial_split(data = votes, prop = 0.8)
# train-test splitting: 80%:20%
votes_train <- training(splitter)
votes_test <- testing(splitter)
votes_bayes <- naiveBayes(party ~ .,
votes_train,
laplace = 1)
votes_bayes
head(votes_test)
# membuat prediksi untuk data testing
votes_pred <- predict(votes_bayes, votes_test, type = "class")
votes_pred[0:5]
knitr::include_graphics("assets/confusion_matrix.png")
# evaluasi model dengan confusion matrix
confusionMatrix(data = votes_pred,
reference = votes_test$party)
knitr::include_graphics("assets/roc-animation.gif")
knitr::include_graphics("assets/ideal_roc.png")
# prediksi: ambil nilai peluang
pred_test_prob <- predict(votes_bayes, votes_test, type = "raw")
# ambil peluang kelas positif: democrat
pred_prob <- pred_test_prob[,1]
# membuat prediction object agar dapt menghitung nilai TPR, FPR, dan AUC
bayes_roc <- prediction(predictions = pred_prob,
labels = votes_test$party,
label.ordering = c("republican",
"democrat")) # urutan: negatif, positif
# membuat plot ROC
model_roc_vec <- performance(bayes_roc,
"tpr", # True Positive Rate (Recall)
"fpr") # False Positive Rate (1 - Specificity)
plot(model_roc_vec)
abline(0,1 , lty = 2)
# menghitung AUC
bayes_auc <- performance(bayes_roc, "auc")
bayes_auc@y.values[[1]] # mengakses nilai AUC
library(dplyr)
library(stringr)
library(tm)
library(SnowballC)
sms_raw <- read.csv("data_input/spam.csv")
head(sms_raw)
# Cek Struktur Data
glimpse(sms_raw)
# mengubah tipe data
sms <- sms_raw %>%
mutate(label = as.factor(label))
sms
# your code here
sms %>%
filter(label == "spam") %>%
pull(text) %>% # Mengambil kolom dan mengubah jadi bentuk vector
head(5)
# ubah format menjadi corpus
sms_corpus <- sms$text %>% VectorSource() %>% VCorpus()
sms_corpus
sms_corpus[[9]]$content
removeNumbers("saya aslinya 2 orang, hubungi di nomor 0843242123")
# Remove numbers
sms_clean <- sms_corpus %>% tm_map(removeNumbers)
sms_clean[[9]]$content
tolower("WINNER") == "winner"
# Case-folding to lowercase
sms_clean <- sms_clean %>% tm_map(content_transformer(tolower))
sms_clean[[9]]$content
