# your code here
loan <- read_csv("loan.csv")
# your code here
loan <- read.csv("loan.csv")
glimpse(loan)
library(dplyr)
# your code here
loan <- read.csv("loan.csv")
glimpse(loan)
library(dplyr)
# your code here
loan <- read.csv("loan.csv")
str(loan)
library(dplyr)
# your code here
loan <- read.csv("loan.csv", stringsAsFactors = T)
str(loan)
# your code here
loan %<% filter(default == "yes")
# your code here
loan %>% filter(default == "yes")
# your code here
loan %>% filter(default == "yes") %>% group_by(purpose)
# your code here
loan %>% filter(default == "yes") %>% group_by(purpose) %>% summarise(count = n()) %>% arrange(desc(count))
library(partykit)
set.seed(100)
# your code here
model_dt <- ctree(formula = default ~ .,
data = dine,
control = ctree_control(mincriterion = 0.9,
minsplit = 0,
minbucket = 0))
library(rsample)
# untuk persiapan data
library(dplyr)
# untuk keperluan machine learning
library(partykit)
install.packages("partykit")
library(rsample)
# untuk persiapan data
library(dplyr)
# untuk keperluan machine learning
library(partykit)
library(randomForest)
install.packages("randomForest")
library(rsample)
# untuk persiapan data
library(dplyr)
# untuk keperluan machine learning
library(partykit)
library(randomForest)
library(caret)
set.seed(100)
# your code here
model_dt <- ctree(formula = default ~ .,
data = dine,
control = ctree_control(mincriterion = 0.9,
minsplit = 0,
minbucket = 0))
library(rsample)
# untuk persiapan data
library(dplyr)
# untuk keperluan machine learning
library(partykit)
library(randomForest)
library(caret)
set.seed(100)
# your code here
model_dt <- ctree(formula = default ~ .,
data = loan,
control = ctree_control(mincriterion = 0.9,
minsplit = 0,
minbucket = 0))
plot(model_dt, type = "simple")
library(rsample)
# untuk persiapan data
library(dplyr)
# untuk keperluan machine learning
library(partykit)
library(randomForest)
library(caret)
set.seed(100)
# your code here
model_dt <- ctree(formula = default ~ .,
data = loan,
control = ctree_control(mincriterion = 0.9,
minsplit = 10,
minbucket = 7))
plot(model_dt, type = "simple")
library(rsample)
# untuk persiapan data
library(dplyr)
# untuk keperluan machine learning
library(partykit)
library(randomForest)
library(caret)
set.seed(100)
# your code here
model_dt <- ctree(formula = default ~ .,
data = loan,
control = ctree_control(mincriterion = 0.9,
minsplit = 5,
minbucket = 5))
plot(model_dt, type = "simple")
library(rsample)
# untuk persiapan data
library(dplyr)
# untuk keperluan machine learning
library(partykit)
library(randomForest)
library(caret)
set.seed(100)
# your code here
model_dt <- ctree(formula = default ~ .,
data = loan,
control = ctree_control(mincriterion = 0.9,
minsplit = 80,
minbucket = 80))
plot(model_dt, type = "simple")
# your code here
model_rf <- readRDS("model/model_rf.RDS")
# your code here
model_rf <- readRDS("model_rf.RDS")
library(randomForest)
# your code here
library(randomForest)
# your code here
model_rf$finalModel
# your code here
varImp(model_rf) %>% plot()
# your code here
RNGkind(sample.kind = "Rounding")
set.seed(100)
splitter <- initial_split(data = loan, prop = 0.8)
loan_train <- training(splitter)
loan_test <- testing(splitter)
pred_rf <- predict(model_rf,
loan_train,
type = "raw")
