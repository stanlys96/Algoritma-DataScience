fruits %>% is.na() %>% colSums()
fruits <- fruits %>%
mutate(value = ifelse(is.na(value), mean(value, na.rm = TRUE), value))
# your code here
fruits <- read.csv("fruits.csv")
fruits <- fruits %>%
mutate(fiber = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(sugars = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(magnessium_mg = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(potassium_mg = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(sodium_g = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(vitamin_a_iu = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(vitamin_b1_mg = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(vitamin_b2_mg = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(viatmin_b3_mg = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(vitamin_b5_mg = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(vitamin_b6_mg = ifelse(is.na(value), mean(value, na.rm = TRUE), value)) %>%
mutate(vitamin_e_mg = ifelse(is.na(value), mean(value, na.rm = TRUE), value))
# your code here
fruits <- read.csv("fruits.csv")
fruits <- fruits %>%
mutate(fiber = ifelse(is.na(fiber), mean(fiber, na.rm = TRUE), fiber)) %>%
mutate(sugars = ifelse(is.na(sugars), mean(sugars, na.rm = TRUE), sugars)) %>%
mutate(magnessium_mg = ifelse(is.na(magnessium_mg), mean(magnessium_mg, na.rm = TRUE), magnessium_mg)) %>%
mutate(potassium_mg = ifelse(is.na(potassium_mg), mean(potassium_mg, na.rm = TRUE), potassium_mg)) %>%
mutate(sodium_g = ifelse(is.na(sodium_g), mean(sodium_g, na.rm = TRUE), sodium_g)) %>%
mutate(vitamin_a_iu = ifelse(is.na(vitamin_a_iu), mean(vitamin_a_iu, na.rm = TRUE), vitamin_a_iu)) %>%
mutate(vitamin_b1_mg = ifelse(is.na(vitamin_b1_mg), mean(vitamin_b1_mg, na.rm = TRUE), vitamin_b1_mg)) %>%
mutate(vitamin_b2_mg = ifelse(is.na(vitamin_b2_mg), mean(vitamin_b2_mg, na.rm = TRUE), vitamin_b2_mg)) %>%
mutate(viatmin_b3_mg = ifelse(is.na(viatmin_b3_mg), mean(viatmin_b3_mg, na.rm = TRUE), viatmin_b3_mg)) %>%
mutate(vitamin_b5_mg = ifelse(is.na(vitamin_b5_mg), mean(vitamin_b5_mg, na.rm = TRUE), vitamin_b5_mg)) %>%
mutate(vitamin_b6_mg = ifelse(is.na(vitamin_b6_mg), mean(vitamin_b6_mg, na.rm = TRUE), vitamin_b6_mg)) %>%
mutate(vitamin_e_mg = ifelse(is.na(vitamin_e_mg), mean(vitamin_e_mg, na.rm = TRUE), vitamin_e_mg))
fruits %>% is.na() %>% colSums()
fruits %>%
select_if(is.numeric) %>%
summary
View(loan_clean)
View(loan_clean)
View(fruits)
View(fruits)
# your code
fruits_pca <- PCA(
X = fruits, # data awal
scale.unit = T, # scaling
graph = F, # tidak menampilkan gambar
ncp = 20 # jumlah kolom numerik
)
View(fruits)
View(fruits)
# your code
fruits_pca <- PCA(
X = fruits, # data awal
scale.unit = T, # scaling
quali.sup = 1, # index kolom qualitative
graph = F, # tidak menampilkan gambar
ncp = 8 # jumlah kolom numerik
)
# your code here
fruits_pca$eig
# your code here
plot.PCA(
x = fruits_pca,
)
# your code here
plot.PCA(
x = fruits_pca,
choix = "ind", # pilihan, untuk menampilkan per-observasi
)
# your code here
plot.PCA(
x = fruits_pca,
choix = "ind", # pilihan, untuk menampilkan per-observasi
invisible = "quali", # untuk menghilangkan garis panah
select = "contrib 10", # untuk identifikasi 10 outlier
habillage = "not_paid" # untuk mewarnai titik observasi (masukkan nama kolom)
)
# your code here
plot.PCA(
x = fruits_pca,
choix = "var",
)
# your code here
plot.PCA(
x = fruits_pca,
choix = "ind", # pilihan, untuk menampilkan per-observasi
invisible = "quali", # untuk menghilangkan garis panah
select = "contrib 10", # untuk identifikasi 10 outlier
habillage = "not_paid" # untuk mewarnai titik observasi (masukkan nama kolom)
)
# your code here
plot.PCA(
x = fruits_pca,
choix = "ind", # pilihan, untuk menampilkan per-observasi
invisible = "quali", # untuk menghilangkan garis panah
select = "contrib 10", # untuk identifikasi 10 outlier
)
View(fruits)
View(fruits)
# your code here
fruits <- read.csv("fruits.csv")
# your code here
fruits <- read.csv("fruits.csv")
fruits <- na.omit(fruits)
fruits %>% is.na() %>% colSums()
# your code here
fruits <- read.csv("fruits.csv")
fruits <- na.omit(fruits)
fruits %>% is.na() %>% colSums()
rownames(fruits) <- fruits$name
fruits <- fruits %>%
select(-c(name))
View(fruits)
View(fruits)
# your code
fruits_pca <- PCA(
X = fruits, # data awal
scale.unit = T, # scaling
quali.sup = 1, # index kolom qualitative
graph = F, # tidak menampilkan gambar
ncp = 20 # jumlah kolom numerik
)
# your code here
fruits_pca$eig
# your code here
fruits_scale <- scale(fruits)
# your code here
fruits <- read.csv("fruits.csv")
fruits <- na.omit(fruits)
fruits %>% is.na() %>% colSums()
rownames(fruits) <- fruits$name
fruits <- fruits %>%
select(-c(name))
# your code here
fruits_pca$eig
# your code here
fruits_scale <- scale(fruits)
# your code here
fruits_pca <- PCA(
X = fruits_scale, # data awal
scale.unit = F, # scaling
quali.sup = 1, # index kolom qualitative
graph = F, # tidak menampilkan gambar
ncp = 20 # jumlah kolom numerik
)
# your code here
fruits_pca <- PCA(
X = fruits_scale, # data awal
scale.unit = F, # scaling
quali.sup = 1, # index kolom qualitative
graph = F, # tidak menampilkan gambar
ncp = 20 # jumlah kolom numerik
)
fruits_pca$eig
# your code here
fruits_pca <- PCA(
X = fruits_scale, # data awal
scale.unit = F, # scaling
graph = F, # tidak menampilkan gambar
ncp = 20 # jumlah kolom numerik
)
fruits_pca$eig
# your code here
plot.PCA(
x = fruits_pca,
choix = "ind", # pilihan, untuk menampilkan per-observasi
invisible = "quali", # untuk menghilangkan garis panah
select = "contrib 10", # untuk identifikasi 10 outlier
)
plot.PCA(
x = fruits_pca,
choix = "var", # pilihan, untuk menampilkan per-observasi
invisible = "quali", # untuk menghilangkan garis panah
select = "contrib 10", # untuk identifikasi 10 outlier
)
# your code here
plot.PCA(
x = fruits_pca,
choix = "var", # pilihan, untuk menampilkan per-observasi
invisible = "quali", # untuk menghilangkan garis panah
select = "contrib 10", # untuk identifikasi 10 outlier
)
# your code here
pca_dimdesc <- dimdesc(fruits_pca)
pca_dimdesc$Dim.1
# your code here
pca_dimdesc <- dimdesc(fruits_pca)
pca_dimdesc$Dim.1
View(fruits_pca)
View(fruits_pca)
# remove outliers (fill the blank)
fruits_outlier <- c("Avocado", "Dates, deglet noor")
fruits_clean <- fruits[!(row.names(fruits) %in% fruits_outlier),]
# scale the data
fruits_clean_s <- scale(fruits_clean)
# function
RNGkind(sample.kind = "Rounding")
kmeansTunning <- function(data, maxK) {
withinall <- NULL
total_k <- NULL
for (i in 1:maxK) {
set.seed(4)
temp <- kmeans(data,i)$tot.withinss
withinall <- append(withinall, temp)
total_k <- append(total_k,i)
}
plot(x = total_k, y = withinall, type = "o", xlab = "Number of Cluster", ylab = "Total within")
}
# apply function
# kmeansTunning(your_data, maxK = 5)
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
options(scipen = 999)
knitr::include_graphics("additional_assets/UL.png")
knitr::include_graphics("additional_assets/pca.png")
knitr::include_graphics("additional_assets//knowledge check.png")
knitr::include_graphics(c("additional_assets/lr_vs_pca_1.png", "additional_assets/lr_vs_pca_2.png"))
knitr::include_graphics("additional_assets/pca.gif")
knitr::include_graphics("additional_assets/feature_elimination.jpg")
knitr::include_graphics("additional_assets/feature_extraction.jpg")
knitr::include_graphics("additional_assets/ul12.png")
# perkalian matrix di R
matrix(c(0,1,-1,0), nrow=2) %*% as.vector(c(2,3))
# perkalian matrix di R
matrix(c(1,0,0,1), nrow=2) %*% as.vector(c(2,3))
# membuat data dummy
RNGkind(sample.kind = "Rounding")
set.seed(100)
x <- runif(200) # buat data random dengan distribusi normal
data <- data.frame(x=x, y=-x+runif(100, 1.05, 1.25)) # buat data frame
data <- scale(data) # agar skala antar variable sama
plot(data)
# matrix covariance
A <- cov(data)
A
# menghitung eigen
eigen(A)
# plotting eigen vector as new coordinate
slope1 <- eigen(A)$vectors[1,1]/eigen(A)$vectors[2,1]
slope2 <- eigen(A)$vectors[1,2]/eigen(A)$vectors[2,2]
plot(data, pch=19, cex=0.25, xlim=c(-1.5,1.5), ylim=c(-1.5,1.5))
lines(data[,1], data[,1] * slope1, col="blue") # PC1
lines(data[,1], data[,1] * slope2, col="green") # PC2
library(dplyr)
loan <- read.csv("data_input/loan2017Q4.csv", stringsAsFactors = T)
str(loan)
loan_clean <- loan %>%
mutate_at(vars(not_paid, verified, grdCtoA), as.factor)
loan_clean %>% is.na() %>% colSums()
loan_clean %>%
select_if(is.numeric) %>%
summary
knitr::include_graphics("additional_assets/pca_wo_scale.png")
# install.packages("FactorMineR")
library(FactoMineR)
names(loan_clean)
# indeks kolom numerik (quantitative)
quantivar <- c(3:6,9:11,14)
# indeks kolom kategorik (qualitative)
qualivar <- c(1,2,7,8,12,13,15,16)
# bagian ini opsional
# nama kolom numerik (quantitative)
quanti <- loan_clean %>%
select_if(is.numeric) %>%
colnames()
# indeks kolom numerik
quantivar <- which(colnames(loan_clean) %in% quanti)
# nama kolom kategorik (qualitative)
quali <- loan_clean %>%
select_if(is.factor) %>%
colnames()
# indeks kolom kategorik
qualivar <- which(colnames(loan_clean) %in% quali)
# melakukan PCA dengan FactoMineR
loan_pca <- PCA(
X = loan_clean, # data awal
scale.unit = T, # scaling
quali.sup = qualivar, # index kolom qualitative
graph = F, # tidak menampilkan gambar
ncp = 8 # jumlah kolom numerik
)
loan_pca$eig
loan_pca$var$coord
loan_pca$ind$coord
plot.PCA(
x = loan_pca,
)
plot.PCA(
x = loan_pca, # obj PCA
choix = "ind", # pilihan, untuk menampilkan per-observasi
invisible = "quali", # untuk menghilangkan garis panah
select = "contrib 10", # untuk identifikasi 10 outlier
habillage = "not_paid" # untuk mewarnai titik observasi (masukkan nama kolom)
)
plot.PCA(
x = loan_pca,
choix = "var"
)
# bar plot variable contribution
library(factoextra)
fviz_contrib(X = loan_pca, axes = 2, choice = "var")
plot.PCA(x = loan_pca,
choix = "var")
# opsional: cek nilai korelasi hanya untuk memastikan
library(GGally)
ggcorr(loan_clean, label = TRUE, hjust = 1)
# get function & data
source("R/biplot.R")
data("USArrests")
head(USArrests)
pca_usa <- prcomp(USArrests, scale = T)
biplot(pca_usa)
# PCA & Visualization
fancy_biplot(pca_usa)
loan_dim <- dimdesc(loan_pca)
loan_dim$Dim.1$quanti %>% as.data.frame()
summary(loan_pca)
# dimdisc: dimension description
loan_dim <- dimdesc(loan_pca)
# variable yang berkontribusi untuk PC1
loan_dim$Dim.1$quanti %>% as.data.frame()
fviz_contrib(
X = loan_pca,
choice = "var",
axes = 1
)
loan_pca$ind$coord %>% as.data.frame()
loan_pca$eig # menampilkan cummulative proportion variance/eigen value
# mengambil data hasil PCA sebanyak PC yang dibutuhkan
loan_keep <- loan_pca$ind$coord[ , 1:5 ] %>% as.data.frame()
library(FactoMineR)
# var numerik --> 8
# reconstruct data menggunakan PC1 - PC5
loan_reconst <- reconst(loan_pca,
ncp = 5) # jumlah PC yang ingin digunakan untuk reconstruct
head(data.frame(loan_reconst), 3)
# data awal (coba bandingkan dengan hasil reconstruct di atas)
loan_clean %>%
select_if(is.numeric) %>%
head(3)
# read `faceData` 32 pixel
load("data_input/face.rda")
# PCA
face_pca <- PCA(faceData, graph = F, ncp = 32, scale.unit = T)
# face_pca$eig
# create reconstructed data
face_recon1 <- reconst(face_pca, ncp = 2)
face_recon2 <- reconst(face_pca, ncp = 4)
face_recon3 <- reconst(face_pca, ncp = 6)
face_recon4 <- reconst(face_pca, ncp = 32) # mengambil semua PC
# make function to visualize image data
showMatrix <- function(x, title){
image(t(x[nrow(x):1,]),
xaxt = 'n', yaxt = 'n',
col = gray((0:32)/32),
main = title,
font.main=4,
cex.main=0.5
)
}
# visualize image data
par(mfrow=c(2,2), mar=c(0.5,0.5,1.5,0.5))
showMatrix(faceData, title = 'Original Image')
showMatrix(face_recon1, title = 'Reconstructed: 2 dimensions')
showMatrix(face_recon3, title = 'Reconstructed: 6 dimensions')
showMatrix(face_recon4, title = 'Reconstructed: All PCs')
knitr::include_graphics("additional_assets/kmeans.jpg")
whisky <- read.csv("data_input/whiskies.txt")
head(whisky)
# assign nilai dari kolom Distillery menjadi rownames
rownames(whisky) <- whisky$Distillery
# membuang kolom yang tidak digunakan
whisky <- whisky %>%
select(-c(Postcode, Latitude, Longitude, RowID, Distillery))
head(whisky)
whisky %>% is.na() %>% colSums()
summary(whisky)
whisky_z <- scale(whisky)
summary(whisky_z)
# k-means dengan 3 cluster
RNGkind(sample.kind = "Rounding")
set.seed(100)
whisky_km <- kmeans(x = whisky_z, # data yang sudah discaling
centers = 3) # jumlah k (cluster yang diinginkan)
whisky_km$iter
RNGkind(sample.kind = "Rounding")
set.seed(101)
# your code here
fruits_cluster <- kmeans(x = fruits_clean_s, # data yang sudah discaling
centers = 3) # jumlah k (cluster yang diinginkan)
# scale the data
fruits_clean_s <- scale(fruits_clean)
# remove outliers (fill the blank)
fruits_outlier <- c("Avocado", "Dates, deglet noor")
fruits_clean <- fruits[!(row.names(fruits) %in% fruits_outlier),]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(FactoMineR)
library(factoextra)
# your code here
fruits <- read.csv("fruits.csv")
fruits <- na.omit(fruits)
fruits %>% is.na() %>% colSums()
rownames(fruits) <- fruits$name
fruits <- fruits %>%
select(-c(name))
# your code
# check NA
# your code here
fruits_pca$eig
# remove outliers (fill the blank)
fruits_outlier <- c("Avocado", "Dates, deglet noor")
fruits_clean <- fruits[!(row.names(fruits) %in% fruits_outlier),]
# scale the data
fruits_clean_s <- scale(fruits_clean)
RNGkind(sample.kind = "Rounding")
set.seed(101)
# your code here
fruits_cluster <- kmeans(x = fruits_clean_s, # data yang sudah discaling
centers = 3) # jumlah k (cluster yang diinginkan)
library(factoextra)
fviz_nbclust(fruits_clean_s, FUNcluster = kmeans, method="wss")
RNGkind(sample.kind = "Rounding")
set.seed(101)
# your code here
fruits_cluster <- kmeans(x = fruits_clean_s, # data yang sudah discaling
centers = 3) # jumlah k (cluster yang diinginkan)
library(factoextra)
fviz_nbclust(fruits_clean_s, FUNcluster = kmeans, method="wss")
RNGkind(sample.kind = "Rounding")
set.seed(101)
# your code here
fruits_cluster <- kmeans(x = fruits_clean_s, # data yang sudah discaling
centers = 6) # jumlah k (cluster yang diinginkan)
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 6)
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 6)
fruits$cluster <- fruits_clean_opt$cluster
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 6)
fruits_clean_opt
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 6)
fruits_clean_opt$cluster
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 4)
fruits_clean_opt$cluster
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 3)
fruits_clean_opt$cluster
library(factoextra)
fviz_nbclust(fruits_clean_s, FUNcluster = kmeans, method="wss")
RNGkind(sample.kind = "Rounding")
set.seed(101)
# your code here
fruits_cluster <- kmeans(x = fruits_clean_s, # data yang sudah discaling
centers = 3) # jumlah k (cluster yang diinginkan)
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 7)
fruits_clean_opt$cluster
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 7)
fruits_clean_opt
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 7)
fruits_clean_opt$cluster
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 7)
fruits_clean_opt
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 7)
fruits_clean_opt$cluster
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 7)
fruits$cluster <- fruits_clean_opt$cluster
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 7)
fruits_clean$cluster <- fruits_clean_opt$cluster
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 7)
fruits_clean$cluster <- fruits_clean_opt$cluster
the_centroid <- fruits_clean %>%
group_by(cluster) %>%
summarise_all(mean)
the_centroid
fruits_clean$cluster
fruits_clean_opt
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 7)
fruits_clean$cluster <- fruits_clean_opt$cluster
the_centroid <- fruits_clean %>%
group_by(cluster) %>%
summarise_all(mean)
the_centroid
fruits_clean_opt$cluster
# your code here
fruits_clean_opt$cluster
# your code here
fruits_clean_opt <- kmeans(fruits_clean_s, centers = 7)
fruits_clean$cluster <- fruits_clean_opt$cluster
the_centroid <- fruits_clean %>%
group_by(cluster) %>%
summarise_all(mean)
the_centroid
