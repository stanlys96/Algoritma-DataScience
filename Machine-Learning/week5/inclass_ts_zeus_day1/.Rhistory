start = c(2011, 1),
frequency = 12)
sales_ts
# autoplot
autoplot(sales_ts)
# Decompose object time series
sales_ts %>% decompose()
# Visualisasi hasil decompose
sales_ts %>% decompose() %>% autoplot()
knitr::include_graphics("assets/decompose.png")
trend <- dautonsa %>%
mutate(date = ymd(date),
trend = (sales_ts %>% decompose())$trend) # ekstraksi trend
ggplot(dautonsa, aes(date, sales)) +
geom_line() +
geom_line(color='red',data = trend, aes(x=date, y=trend))
seasonality <- dautonsa %>%
mutate(date = ymd(date),
month = month(date, label = T)) %>% # ekstraksi bulan
group_by(month) %>%
summarise(mean_sales = mean(sales)) # rata-rata sales untuk setiap bulan
ggplot(seasonality, aes(month, mean_sales, group = 1)) +
geom_line()
# additive time series
sales_ts %>% autoplot()
# multiplicative time series
AirPassengers %>% autoplot()
# decompose multiplicative time series
AirPassengers %>% decompose(type="multiplicative") %>% autoplot()
# Subsetting Data Test
sales_test <- sales_ts %>% tail(18)
sales_test
# Subsetting Data Train
sales_train <- sales_ts %>% head(-18)
sales_train
# autoplot + autolayer
autoplot(sales_train) + autolayer(sales_test)
rain_ts <- ts(data = scan("data_input/precip1.dat", skip = 1),
start = 1813,
frequency = 1)
rain_ts %>% autoplot()
rain_ses <- HoltWinters(rain_ts, beta = F, gamma = F)
rain_ts %>%
autoplot() +
autolayer(rain_ses$fitted[,1], series = "Model") +
autolayer(forecast(object = rain_ses, h = 10)$mean, series = "Forecast")
# Simple Exponential Smoothing
model_simple <- HoltWinters(sales_train, beta=F, gamma =F)
model_simple
# Hasil smoothing
model_simple$fitted[,1]
# gunakan autolayer() untuk menambahkan autoplot()
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") +
autolayer(model_simple$fitted[,1])
# Forecast SES
forecast_simple <- forecast(object = model_simple,
h = 18) # angka sesuai dengan jumlah observasi di data test
forecast_simple
# Tambahkan nilai forecast pada visualisasi sebelumnya
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") + # Visualisasi data test
autolayer(model_simple$fitted[,1], series = "Model") + # Visualisasi hasil smoothing model
autolayer(forecast_simple$mean) # visualisasi hasil forecast dengan data test
# Plot co2_ts
co2 <- read.csv("data_input/carbon.csv")
co2_ts <- ts(data = co2$co2_emission,
start = 1970, # awal periode dari data
frequency = 1) # datanya tahunan, ingin lihat pola tahunan
co2_ts %>% autoplot()
co2_holt <- HoltWinters(co2_ts, gamma = F)
co2_ts %>%
autoplot() +
autolayer(co2_holt$fitted[,1], series = "Model") +
autolayer(forecast(object = co2_holt, h = 10)$mean, series = "Forecast")
# Modeling dengan nilai alpha dan beta yang dicari secara otomatis
model_double <- HoltWinters(sales_train, gamma=F)
model_double
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") +
autolayer(model_double$fitted[,1])
# Please type your code
# Pak Wildan
forecast_double<- forecast(model_double, h = 18)
forecast_double
# Tambahkan nilai forecast pada visualisasi sebelumnya
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") + # Visualisasi data test
autolayer(model_double$fitted[,1], series = "Model") + # Visualisasi hasil smoothing model
autolayer(forecast_double$mean) # ambil hasil Point Forecast dengan atribute $mean
# seasonal = "additive"
model_triple <- HoltWinters(sales_train, seasonal = "additive")
model_triple
model_triple$fitted
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") +
autolayer(model_triple$fitted[,1])
forecast_triple <- forecast(model_triple, h=18)
forecast_triple
# Tambahkan nilai forecast pada visualisasi sebelumnya
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") + # Visualisasi data test
autolayer(model_triple$fitted[,1], series = "Model") + # Visualisasi hasil smoothing model
autolayer(forecast_triple$mean)
library(forecast)
# Evaluasi model SES
accuracy(forecast_simple$mean, # hasil forecast
sales_test)           # data aktual
print(mean(sales_ts))
print(sd(sales_ts))
# Evaluasi model Holt/Double
accuracy(forecast_double$mean, sales_test)
# Evaluasi model Holt-Winters/Triple
accuracy(forecast_triple$mean, sales_test)
model_triple
# Ubah nilai gamma = 0.6
sales_tuning <- HoltWinters(sales_train, gamma = 0.6, seasonal = "additive")
# Forecasting dan Visualisasi
forecast_tuning <- forecast(sales_tuning, h = 18)
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") + # Visualisasi data test
autolayer(sales_tuning$fitted[,1], series = "Model") + # Visualisasi hasil smoothing model
autolayer(forecast_tuning$mean, series = "Forecast")
# Perbandingan evaluasi model Holt-Winters default vs tuning
accuracy(forecast_triple$mean, sales_test)
accuracy(forecast_tuning$mean, sales_test)
knitr::include_graphics("assets/decompose.png")
knitr::include_graphics("assets/Intuisi_lag.jpg")
co2 %>% mutate(
lag_1 = lag(x = co2$co2_emission, n = 1),
lag_2 = lag(x = co2$co2_emission, n = 2),
lag_3 = lag(x = co2$co2_emission, n = 3)
)
library(TTR)
co2_sma3 <- SMA(co2_ts, 3)
co2_sma3
co2_ts
co2_ts %>%
autoplot() +
autolayer(co2_sma3, series="SMA 3") +
autolayer(forecast(co2_sma3, h=12)$mean, series="Forecast")
# sma = 10
co2_sma10 <- SMA(co2_ts, n=10)
co2_sma10
co2_ts %>%
autoplot() +
autolayer(co2_sma10, series="SMA 10")+
autolayer(forecast(co2_sma10, h=12)$mean, series="Forecast")
knitr::include_graphics("assets/Stationary.png")
co2_ts %>% autoplot()
# adf.test
adf.test(co2_ts)
y <- c(10, 12, 14, 12, 15, 12, 10, 9)
y
# differencing dengan fungsi diff()
diff(y)
# diff & autoplot
co2_ts %>% diff() %>% autoplot()
# diff & adf.test
adf.test(co2_ts %>% diff())
# diff & adf.test
adf.test(co2_ts %>% diff() %>% diff())
co2_ts %>% autoplot()
co2_auto <- auto.arima(co2_ts,
d=2) # differencing sebanyak dua kali agar datanya stasioner
co2_auto
forecast_auto <- forecast(co2_auto, h = 10)
forecast_auto
co2_ts %>%
autoplot() +
autolayer(forecast_auto$fitted, series = "Model") +
autolayer(forecast_auto$mean, series = "Forecast")
knitr::include_graphics("assets/acf_pacf.png")
# Visualisasi ACF dan PACF
tsdisplay(co2_ts %>% diff() %>% diff())
co2_arima <- Arima(co2_ts, order=c(3, 2, 1))
co2_arima
forecast_arima <- forecast(co2_arima, h=10)
forecast_arima
co2_ts %>%
autoplot() +
autolayer(forecast_arima$fitted, series = "Model") +
autolayer(forecast_arima$mean, series = "Forecast")
# Autoplot
sales_train %>% autoplot()
# adf.test
sales_train %>% adf.test()
sales_train
# Autoplot
sales_train %>% diff(lag=12) %>% autoplot()
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>",
fig.width=9,
fig.height=5
)
options(scipen = 99)
# load library
library(dplyr) # data wrangling
library(lubridate) # date manipulation
library(padr) # complete data frame
library(zoo) # Missing value imputation
library(forecast) # time series library
library(TTR) # for Simple moving average function
library(MLmetrics) # calculate error
library(tseries) # adf.test
library(fpp) # data for forecasting: principles and practice
library(TSstudio) # visualisasi timeseries
library(ggplot2)
library(tidyr)
knitr::include_graphics("assets/Time Series Forecasting.png")
df <- data.frame(date = as.Date(c("2023-08-16","2023-08-19","2023-08-18")),
value = c(23,20,34))
df
# Mengurutkan data berdasarkan kolom date
df <- arrange(df, date)
df
# Mendefinisikan deret waktu lengkap
tanggal_lengkap <- seq.Date(from = as.Date("2023-08-16"), # Waktu awal
to = as.Date("2023-08-19"), # Waktu akhir
by = "day") # Interval
tanggal_lengkap
# memeriksa kelengkapan periode waktu
all(df$date == tanggal_lengkap)
library(padr)
df <- pad(df, interval = "day")
df
# Please type your code for code na.aggregate()
library(zoo)
df %>%
mutate(value = na.aggregate(object = value,
FUN = mean))
# additional
# menggunakan rata-rata nilai terdekat
df %>% mutate(value = na.fill(value, fill="extend"))
# Please type your code for code na.locf()
df %>%
mutate(value = na.locf(object=value))
knitr::include_graphics("assets/Air_Passengers.png")
data.frame(
Data = c("Yearly","Monthly","Weekly","Daily","Hourly","Minutes","Seconds"),
Minute = c("-", "-", "-","-", "-", "-", "60"),
Hour = c("-", "-", "-","-", "-", "60", "60*60"),
Day = c("-", "-", "-","-", "24", "60*24", "60*60*24"),
Week = c("-", "-", "-","7", "24*7", "60*24*7", "60*60*24*7"),
Month = c("-", "-", "4","30", "24*30", "60*24*30", "60*60*24*30"),
Year = c("1", "12", "52","365", "24*365", "60*24*365", "60*60*24*365")
)
dautonsa <- read.csv("data_input/DAUTONSA.csv")
dautonsa
# Ubah tipe data menjadi date
# Pak Tedi dan Pak Budi
dautonsa <- dautonsa %>%
mutate(date = as.Date(date))
# Pak Tizar
dautonsa %>%
mutate(date = ymd(date))
# Mendefinisikan deret waktu yang lengkap
complete_month <- seq.Date(from = min(dautonsa$date) ,
to = max(dautonsa$date) ,
by = "month" )
complete_month
# Cek periode yang terlewat
all(dautonsa$date == complete_month)
# cek missing value
is.na(dautonsa) %>% colSums()
# simpan dalam object sales_ts
sales_ts <- ts(data = dautonsa$sales,
start = c(2011, 1),
frequency = 12)
sales_ts
# autoplot
autoplot(sales_ts)
# Decompose object time series
sales_ts %>% decompose()
# Visualisasi hasil decompose
sales_ts %>% decompose() %>% autoplot()
knitr::include_graphics("assets/decompose.png")
trend <- dautonsa %>%
mutate(date = ymd(date),
trend = (sales_ts %>% decompose())$trend) # ekstraksi trend
ggplot(dautonsa, aes(date, sales)) +
geom_line() +
geom_line(color='red',data = trend, aes(x=date, y=trend))
seasonality <- dautonsa %>%
mutate(date = ymd(date),
month = month(date, label = T)) %>% # ekstraksi bulan
group_by(month) %>%
summarise(mean_sales = mean(sales)) # rata-rata sales untuk setiap bulan
ggplot(seasonality, aes(month, mean_sales, group = 1)) +
geom_line()
# additive time series
sales_ts %>% autoplot()
# multiplicative time series
AirPassengers %>% autoplot()
# decompose multiplicative time series
AirPassengers %>% decompose(type="multiplicative") %>% autoplot()
# Subsetting Data Test
sales_test <- sales_ts %>% tail(18)
sales_test
# Subsetting Data Train
sales_train <- sales_ts %>% head(-18)
sales_train
# autoplot + autolayer
autoplot(sales_train) + autolayer(sales_test)
rain_ts <- ts(data = scan("data_input/precip1.dat", skip = 1),
start = 1813,
frequency = 1)
rain_ts %>% autoplot()
rain_ses <- HoltWinters(rain_ts, beta = F, gamma = F)
rain_ts %>%
autoplot() +
autolayer(rain_ses$fitted[,1], series = "Model") +
autolayer(forecast(object = rain_ses, h = 10)$mean, series = "Forecast")
# Simple Exponential Smoothing
model_simple <- HoltWinters(sales_train, beta=F, gamma =F)
model_simple
# Hasil smoothing
model_simple$fitted[,1]
# gunakan autolayer() untuk menambahkan autoplot()
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") +
autolayer(model_simple$fitted[,1])
# Forecast SES
forecast_simple <- forecast(object = model_simple,
h = 18) # angka sesuai dengan jumlah observasi di data test
forecast_simple
# Tambahkan nilai forecast pada visualisasi sebelumnya
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") + # Visualisasi data test
autolayer(model_simple$fitted[,1], series = "Model") + # Visualisasi hasil smoothing model
autolayer(forecast_simple$mean) # visualisasi hasil forecast dengan data test
# Plot co2_ts
co2 <- read.csv("data_input/carbon.csv")
co2_ts <- ts(data = co2$co2_emission,
start = 1970, # awal periode dari data
frequency = 1) # datanya tahunan, ingin lihat pola tahunan
co2_ts %>% autoplot()
co2_holt <- HoltWinters(co2_ts, gamma = F)
co2_ts %>%
autoplot() +
autolayer(co2_holt$fitted[,1], series = "Model") +
autolayer(forecast(object = co2_holt, h = 10)$mean, series = "Forecast")
# Modeling dengan nilai alpha dan beta yang dicari secara otomatis
model_double <- HoltWinters(sales_train, gamma=F)
model_double
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") +
autolayer(model_double$fitted[,1])
# Please type your code
# Pak Wildan
forecast_double<- forecast(model_double, h = 18)
forecast_double
# Tambahkan nilai forecast pada visualisasi sebelumnya
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") + # Visualisasi data test
autolayer(model_double$fitted[,1], series = "Model") + # Visualisasi hasil smoothing model
autolayer(forecast_double$mean) # ambil hasil Point Forecast dengan atribute $mean
# seasonal = "additive"
model_triple <- HoltWinters(sales_train, seasonal = "additive")
model_triple
model_triple$fitted
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") +
autolayer(model_triple$fitted[,1])
forecast_triple <- forecast(model_triple, h=18)
forecast_triple
# Tambahkan nilai forecast pada visualisasi sebelumnya
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") + # Visualisasi data test
autolayer(model_triple$fitted[,1], series = "Model") + # Visualisasi hasil smoothing model
autolayer(forecast_triple$mean)
library(forecast)
# Evaluasi model SES
accuracy(forecast_simple$mean, # hasil forecast
sales_test)           # data aktual
print(mean(sales_ts))
print(sd(sales_ts))
# Evaluasi model Holt/Double
accuracy(forecast_double$mean, sales_test)
# Evaluasi model Holt-Winters/Triple
accuracy(forecast_triple$mean, sales_test)
model_triple
# Ubah nilai gamma = 0.6
sales_tuning <- HoltWinters(sales_train, gamma = 0.6, seasonal = "additive")
# Forecasting dan Visualisasi
forecast_tuning <- forecast(sales_tuning, h = 18)
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") + # Visualisasi data test
autolayer(sales_tuning$fitted[,1], series = "Model") + # Visualisasi hasil smoothing model
autolayer(forecast_tuning$mean, series = "Forecast")
# Perbandingan evaluasi model Holt-Winters default vs tuning
accuracy(forecast_triple$mean, sales_test)
accuracy(forecast_tuning$mean, sales_test)
knitr::include_graphics("assets/decompose.png")
knitr::include_graphics("assets/Intuisi_lag.jpg")
co2 %>% mutate(
lag_1 = lag(x = co2$co2_emission, n = 1),
lag_2 = lag(x = co2$co2_emission, n = 2),
lag_3 = lag(x = co2$co2_emission, n = 3)
)
library(TTR)
co2_sma3 <- SMA(co2_ts, 3)
co2_sma3
co2_ts
co2_ts %>%
autoplot() +
autolayer(co2_sma3, series="SMA 3") +
autolayer(forecast(co2_sma3, h=12)$mean, series="Forecast")
# sma = 10
co2_sma10 <- SMA(co2_ts, n=10)
co2_sma10
co2_ts %>%
autoplot() +
autolayer(co2_sma10, series="SMA 10")+
autolayer(forecast(co2_sma10, h=12)$mean, series="Forecast")
knitr::include_graphics("assets/Stationary.png")
co2_ts %>% autoplot()
# adf.test
adf.test(co2_ts)
y <- c(10, 12, 14, 12, 15, 12, 10, 9)
y
# differencing dengan fungsi diff()
diff(y)
# diff & autoplot
co2_ts %>% diff() %>% autoplot()
# diff & adf.test
adf.test(co2_ts %>% diff())
# diff & adf.test
adf.test(co2_ts %>% diff() %>% diff())
co2_ts %>% autoplot()
co2_auto <- auto.arima(co2_ts,
d=2) # differencing sebanyak dua kali agar datanya stasioner
co2_auto
forecast_auto <- forecast(co2_auto, h = 10)
forecast_auto
co2_ts %>%
autoplot() +
autolayer(forecast_auto$fitted, series = "Model") +
autolayer(forecast_auto$mean, series = "Forecast")
knitr::include_graphics("assets/acf_pacf.png")
# Visualisasi ACF dan PACF
tsdisplay(co2_ts %>% diff() %>% diff())
co2_arima <- Arima(co2_ts, order=c(3, 2, 1))
co2_arima
forecast_arima <- forecast(co2_arima, h=10)
forecast_arima
co2_ts %>%
autoplot() +
autolayer(forecast_arima$fitted, series = "Model") +
autolayer(forecast_arima$mean, series = "Forecast")
# Autoplot
sales_train %>% autoplot()
# adf.test
sales_train %>% adf.test()
sales_train
# Autoplot
sales_train %>% diff(lag=12) %>% autoplot()
# adf.test
sales_train %>% diff(lag=12) %>% adf.test()
# Autoplot
sales_train %>% diff(lag=12) %>% diff(lag=1) %>% autoplot()
# adf.test
diff_sales <- sales_train %>% diff(lag=12) %>% diff(lag=1)
adf.test(diff_sales)
sales_auto <- auto.arima(sales_train, d=1, D=1)
sales_auto
forecast_auto <- forecast(sales_auto, h=18)
forecast_auto
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") +
autolayer(forecast_auto$fitted, series = "Model") +
autolayer(forecast_auto$mean, series = "Forecast")
# untuk menampilkan banyak lag yang muncul di plot acf dan pacf bisa tambahkan `lag.max`
sales_train %>%
diff(lag = 12) %>% # diff untuk seasonal
diff() %>%
tsdisplay(lag.max = 36)
sales_arima <- Arima(sales_train,
order = c(2, 1, 1),
seasonal = c(0, 1, 0))
sales_arima
forecast_arima <- forecast(sales_arima, h=18)
forecast_arima
sales_train %>%
autoplot() +
autolayer(sales_test, series = "Data Test") +
autolayer(forecast_arima$fitted, series = "Model") +
autolayer(forecast_arima$mean, series = "Forecast")
# Evaluasi model Auto ARIMA
accuracy(forecast_auto$mean, sales_test)
# Evaluasi model ARIMA berdasarkan ACF PACF
accuracy(forecast_arima$mean, sales_test)
Box.test(sales_arima$residuals, type = "Ljung-Box")
